#!/usr/bin/env zunit
@setup {
    load "../zsh-string-lib.lib.zsh"
}

@test 'JSON parser' {

    local -A Strings
    evl @str-parse-json "'a':{'b':'1'}" a Strings

    assert "$state" same_as "0"
    assert "$output" same_as ""
    assert "$Strings[1/1]" same_as " b 1"
}

@test 'read-all' {

    integer FD=13371337 i
    local REPLY
    local -a reply
    command rm -f test_input.txt
    for i ( {1..30000} ) {
        print $i >>! test_input.txt
    }
    exec {FD}< <(command cat test_input.txt)

    evl @str-read-all $FD \; reply=\( "\${(@f)REPLY}" \)

    assert "$state" same_as "0"
    assert "$output" same_as ""
    assert "$reply[1]" same_as "1"
    assert "$reply[10]" same_as "10"
    assert "$reply[100]" same_as "100"
    assert "$reply[1000]" same_as "1000"
    assert "$reply[10000]" same_as "10000"
    assert "$reply[20000]" same_as "20000"
    assert "$reply[30000]" same_as "30000"
    assert "$reply[30001]" same_as ""
}

@test 'ng-match' {
    evl @str-ng-match "abb" "a*b"

    assert "$state" same_as "0"
    assert "$output" same_as ""
    assert "$REPLY" same_as "ab"
}

@test 'ng-matches' {
    arr=( a1xx ayy a2xx )
    evl @str-ng-matches ${arr[@]} "a*x"

    assert "$state" same_as "0"
    assert "$output" same_as ""
    assert "$reply[1]" same_as "a1x"
    assert "$reply[2]" same_as "a2x"
    assert "$reply[3]" same_as ""
}

# vim:ft=zsh:sw=4:sts=4:et
